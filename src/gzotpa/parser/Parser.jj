options {
	STATIC = false;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
	JDK_VERSION = "1.8";
}

PARSER_BEGIN(Parser)
package gzotpa.parser;
import gzotpa.ast.*;
import gzotpa.entity.*;
import gzotpa.type.*;
import gzotpa.exception.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;


public class Parser {
	private String sourceName;
	public Parser(Reader s, String name) {
		this(s);
		this.sourceName = name;
	}
	public AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        }
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (LookaheadSuccess err) {
            throw new SyntaxException("syntax error");
        }
    }
	static public AST parseFile(File file)
								throws SyntaxException, FileException {
		return newFileParser(file).parse();
	}
	static final public String SOURCE_ENCODING = "UTF-8";
	static public Parser newFileParser(File file)
										throws FileException {
		try {
			BufferedReader r =
				new BufferedReader(
					new InputStreamReader(new FileInputStream(file),
						SOURCE_ENCODING));
			return new Parser(r, file.getPath());
		}
		catch (FileNotFoundException ex) {
			throw new FileException(ex.getMessage());
		}
		catch (UnsupportedEncodingException ex) {
			throw new Error("UTF-8 is not supported??: " + ex.getMessage());
		}
	}
	protected Location location(Token t) {
        return new Location(sourceName, t);
    }
    private char unescapeOctal(String s) throws ParseException {
    	int x = Integer.parseInt(s, 8);
    	if (x > 255) throw new ParseException("Gzotpa! Octal ascii exceeds 255!");
    	return (char)x;
    }
    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '"': return '"';
        case '\'': return '\'';
        case 'n': return '\n';
        default:
            throw new ParseException("Gzotpa! Unknown escape sequence: \"\\" + c + "!");
        }
    }
    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);

        while ((idx = image.indexOf("\\", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }
    private long integerValue(String image) {
        String s = image.replaceFirst("[UL]+", "");
        if (s.startsWith("0x") || s.startsWith("0X")) {
            return Long.parseLong(s.substring(2), 16);
        }
        else if (s.startsWith("0") && !s.equals("0")) {
            return Long.parseLong(s.substring(1), 8);
        }
        else {
            return Long.parseLong(s, 10);
        }
    }
}

PARSER_END(Parser)

TOKEN: {
	<VOID: "void">
|	<NULL: "null">
|	<BOOL: "bool">
|	<TRUE: "true">
|	<FALSE: "false">
|   <INT: "int">
|   <STR: "string">
|   <CLASS: "class">
|   <IF: "if">
|   <ELSE: "else">
|   <WHILE: "while">
|   <FOR: "for">
|   <RETURN: "return">
|   <BREAK: "break">
|   <CONTINUE: "continue">
|   <NEW: "new">
|   <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*>
| 	<INTEGER: ["1"-"9"] (["0"-"9"])* | "0">
}

SPECIAL_TOKEN: {
	<SPACES: ([" ", "\t", "\n", "\r", "\f"])+>
|	<LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?> 
}

MORE: {
  	<"\""> : IN_STRING
}
<IN_STRING> MORE: {
	<(~["\"", "\\", "\n", "\r"])+>
|	<"\\" (["0"-"7"]){3}>
|	<"\\" ~[]>
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }
Params params():
{
    Token t = new Token();
    Params params;
}
{
    LOOKAHEAD(")") 
        {
            return new Params(location(t), new ArrayList<Parameter>());
        }
    | params=fixedparams()
        {
            return params;
        }
}
Params fixedparams():
{
    List<Parameter> params = new ArrayList<Parameter>();
    Parameter param, param1;
}
{
    param1=param() { params.add(param1); }
    ( LOOKAHEAD(2) "," param=param() { params.add(param); } )*
        {
            return new Params(param1.location(), params);
        }
}
Parameter param():
{
    TypeNode t;
    String n;
}
{
    t=type() n=name() { return new Parameter(t, n); }
}
BlockNode block():
{
    Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
}
{
    t="{" vars=defvar_list() stmts=stmts() "}"
        {
            return new BlockNode(location(t), vars, stmts);
        }
}
TypeNode type():
{ TypeRef ref; }
{
    ref=typeref() { return new TypeNode(ref); }
}
TypeRef typeref():
{
    TypeRef ref;
    Token t;
    //ParamTypeRefs params;
}
{
    ref=typeref_base()
    ( LOOKAHEAD(2)
      "[" "]"
        {
            ref = new ArrayTypeRef(ref);
        }
    | "[" t=<INTEGER> "]"
        {
            ref = new ArrayTypeRef(ref, integerValue(t.image));
        }
    )*
        {
            return ref;
        }
}
TypeRef typeref_base():
{
    Token t;
}
{
      t=<VOID>          { return new VoidTypeRef(location(t)); }
    | t=<BOOL>           { return new BooleanTypeRef("bool", location(t)); }
    | t=<INT>           { return IntegerTypeRef.intRef(location(t)); }
    | t=<STR>           { return new StringTypeRef("string", location(t)); }
}
List<StmtNode> stmts():
{
    List<StmtNode> ss = new ArrayList<StmtNode>();
    StmtNode s;
}
{
    (s=stmt() { if (s != null) ss.add(s); })*
        {
            return ss;
        }
}
StmtNode stmt():
{
    StmtNode n = null;
    ExprNode e = null;
}
{
    ( ";"
    | e=expr() ";" { n = new ExprStmtNode(e.location(), e); }
    | n=block()
    | n=if_stmt()
    | n=while_stmt()
    | n=for_stmt()
    | n=break_stmt()
    | n=continue_stmt()
    | n=return_stmt()
    )
        {
            return n;
        }
}
IfNode if_stmt():
{
    Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
}
{
    t=<IF> "(" cond=expr() ")" thenBody=stmt()
            [LOOKAHEAD(1) <ELSE> elseBody=stmt()]
        {
            return new IfNode(location(t), cond, thenBody, elseBody);
        }
}
WhileNode while_stmt():
{
    Token t;
    ExprNode cond;
    StmtNode body;
}
{
    t=<WHILE> "(" cond=expr() ")" body=stmt()
        {
            return new WhileNode(location(t), cond, body);
        }
}
ForNode for_stmt():
{
    Token t;
    ExprNode init = null, cond = null, incr = null;
    StmtNode body;
}
{
    t=<FOR> "(" [init=expr()] ";"
              [cond=expr()] ";"
              [incr=expr()] ")" body=stmt()
        {
            return new ForNode(location(t), init, cond, incr, body);
        }
}
BreakNode break_stmt():
{ Token t; }
{
    t=<BREAK> ";" { return new BreakNode(location(t)); }
}
ContinueNode continue_stmt():
{ Token t; }
{
    t=<CONTINUE> ";" { return new ContinueNode(location(t)); }
}
ReturnNode return_stmt():
{
    Token t;
    ExprNode expr;
}
{
      LOOKAHEAD(2) t=<RETURN> ";" { return new ReturnNode(location(t), null); }
    | t=<RETURN> expr=expr() ";"  { return new ReturnNode(location(t), expr); }
}
ExprNode expr():
{
    ExprNode lhs, rhs, expr;
    String op;
}
{
      LOOKAHEAD(term() "=")
      lhs=term() "=" rhs=expr()
        {
            return new AssignNode(lhs, rhs);
        }
    | LOOKAHEAD(term() opassign_op())
      lhs=term() op=opassign_op() rhs=expr()
        {
            return new OpAssignNode(lhs, op, rhs);
        }
    | expr=expr9()
        {
            return expr;
        }
}
String opassign_op(): {}
{
    ( "+="  { return "+"; }
    | "-="  { return "-"; }
    | "*="  { return "*"; }
    | "/="  { return "/"; }
    | "%="  { return "%"; }
    | "&="  { return "&"; }
    | "|="  { return "|"; }
    | "^="  { return "^"; }
    | "<<=" { return "<<"; }
    | ">>=" { return ">>"; }
    )
}
ExprNode expr9():
{ ExprNode l, r; }
{
    l=expr8() ("||" r=expr8() { l = new LogicalOrNode(l, r); })*
        {
            return l;
        }
}
ExprNode expr8():
{ ExprNode l, r; }
{
    l=expr7() ("&&" r=expr7() { l = new LogicalAndNode(l, r); })*
        {
            return l;
        }
}
ExprNode expr7():
{ ExprNode l, r; }
{
    l=expr6() ( ">"  r=expr6() { l = new BinaryOpNode(l, ">", r); }
              | "<"  r=expr6() { l = new BinaryOpNode(l, "<", r); }
              | ">=" r=expr6() { l = new BinaryOpNode(l, ">=", r); }
              | "<=" r=expr6() { l = new BinaryOpNode(l, "<=", r); }
              | "==" r=expr6() { l = new BinaryOpNode(l, "==", r); }
              | "!=" r=expr6() { l = new BinaryOpNode(l, "!=", r); } )*
        {
            return l;
        }
}
ExprNode expr6():
{ ExprNode l, r; }
{
    l=expr5() ("|" r=expr5() { l = new BinaryOpNode(l, "|", r); })*
        {
            return l;
        }
}
ExprNode expr5():
{ ExprNode l, r; }
{
    l=expr4() ("^" r=expr4() { l = new BinaryOpNode(l, "^", r); })*
        {
            return l;
        }
}
ExprNode expr4():
{ ExprNode l, r; }
{
    l=expr3() ("&" r=expr3() { l = new BinaryOpNode(l, "&", r); })*
        {
            return l;
        }
}
ExprNode expr3():
{ ExprNode l, r; }
{
    l=expr2() ( ">>" r=expr2() { l = new BinaryOpNode(l, ">>", r); }
              | "<<" r=expr2() { l = new BinaryOpNode(l, "<<", r); }
              )*
        {
            return l;
        }
}
ExprNode expr2():
{ ExprNode l, r; }
{
    l=expr1() ( "+" r=expr1() { l = new BinaryOpNode(l, "+", r); }
              | "-" r=expr1() { l = new BinaryOpNode(l, "-", r); }
              )*
        {
            return l;
        }
}
ExprNode expr1():
{ ExprNode l, r; }
{
    l=term() ( "*" r=term() { l = new BinaryOpNode(l, "*", r); }
             | "/" r=term() { l = new BinaryOpNode(l, "/", r); }
             | "%" r=term() { l = new BinaryOpNode(l, "%", r); }
             )*
        {
            return l;
        }
}
ExprNode term():
{
    TypeNode t;
    ExprNode n;
}
{
    n=unary()                     { return n; }
}
ExprNode unary():
{
    ExprNode n;
    TypeNode t;
}
{
      "++" n=unary()    { return new PrefixOpNode("++", n); }
    | "--" n=unary()    { return new PrefixOpNode("--", n); }
    | "+" n=term()      { return new UnaryOpNode("+", n); }
    | "-" n=term()      { return new UnaryOpNode("-", n); }
    | "!" n=term()      { return new UnaryOpNode("!", n); }
    | "~" n=term()      { return new UnaryOpNode("~", n); }
	| <NEW> t=type()	{ return new NewTypeNode(t); }
    | n=postfix()       { return n; }
}
ExprNode postfix():
{
    ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
}
{
    expr=primary()
    ( "++"                  { expr = new SuffixOpNode("++", expr); }
    | "--"                  { expr = new SuffixOpNode("--", expr); }
    | "[" idx=expr() "]"    { expr = new ArefNode(expr, idx); }
    | "." memb=name()       { expr = new MemberNode(expr, memb); }
    | "(" args=args() ")"   { expr = new FuncallNode(expr, args); }
    )*
        {
            return expr;
        }
}
String name():
{ Token t; }
{
    t=<IDENTIFIER> { return t.image; }
}
List<ExprNode> args():
{
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
}
{
    [ arg=expr() { args.add(arg); }
      ("," arg=expr() { args.add(arg); })* ]
        {
            return args;
        }
}
ExprNode primary():
{
    Token t;
    ExprNode n;
}
{
      t=<INTEGER>
        {
            return new IntegerLiteralNode(location(t), IntegerTypeRef.intRef(), integerValue(t.image));
        }
    | t=<STRING>
        {
            return new StringLiteralNode(location(t),
                new PointerTypeRef(IntegerTypeRef.charRef()),
                stringValue(t.image));
        }
    | t=<IDENTIFIER>
        {
            return new VariableNode(location(t), t.image);
        }
    | "(" n=expr() ")"
        {
            return n;
        }
}
List<DefinedVariable> defvars():
{
	List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
	TypeNode type;
	String name;
	ExprNode init = null;
}
{
	 type=type() name=name() ["=" init=expr()]
		{
			defs.add(new DefinedVariable(type, name, init));
			init = null;
		}
	( "," name=name() ["=" init=expr()]
		{
			defs.add(new DefinedVariable(type, name, init));
			init = null;
		}
	)* ";"
		{
			return defs;
		}
}

DefinedFunction defun():
{
	TypeRef ret;
	String n;
	Params ps;
	BlockNode body;
}
{
	ret=typeref() n=name() "(" ps=params() ")" body=block()
		{
			TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
			return new DefinedFunction(new TypeNode(t), n, ps, body);
		}
}
List<DefinedVariable> defvar_list():
{
	List<DefinedVariable> result = new ArrayList<DefinedVariable>();
	List<DefinedVariable> vars;
}
{
	( LOOKAHEAD(2) vars=defvars() { result.addAll(vars); } )*
		{
			return result;
		}
}
Declarations top_defs():
{
	Declarations decls = new Declarations();
	DefinedFunction defun;
	List<DefinedVariable> defvars;
	Constant defconst;
}
{
	( LOOKAHEAD(typeref() <IDENTIFIER> "(")
		defun=defun() { decls.addDefun(defun); }
	|	LOOKAHEAD(3)
		defvars=defvars() { decls.addDefvars(defvars); }
	)*
		{
			return decls;
		}
}
AST compilation_unit():
{
	Token t;
	Declarations decls;
}
{
	{
		t = getToken(1);
	}
	decls=top_defs() <EOF>
		{
			return new AST(location(t), decls);
		}
}
